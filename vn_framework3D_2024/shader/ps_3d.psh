struct pixelIn
{
	float4 pos : SV_POSITION;
	float4 col : COLOR0;
	float2 tx0 : TEXCOORD0;
	float3 nor : TEXCOORD1;	//法線ベクトル
	float3 eye : TEXCOORD2;	//視線ベクトル
};

cbuffer ConstantBuffer	//上から順番に情報を取っている
{
	float4x4	WVP;		//World*View*Proj
	float4x4	World;		//ワールド行列
	float4		LightDir;	//平行光源の(逆)方向
	float4		LightCol;	//平行光源の色
	float4		LightAmb;	//環境光の色
	float4		CameraPos;	//カメラのワールド座標
	float4		Diffuse;	//マテリアルの拡散色
	float4		Ambient;	//マテリアルの環境色
	float4		Specular;	//マテリアルの鏡面反射光
}

Texture2D txDiffuse : register(t0);
SamplerState samLinear : register(s0);

float4 main(pixelIn IN) : SV_Target
{
	//カラーとテクスチャを乗算
	float4 color = txDiffuse.Sample(samLinear, IN.tx0) * IN.col;

	//フォンスペキュラ
	float3 N = normalize(IN.nor);	//法線ベクトル
	float3 H = normalize(LightDir.xyz + normalize(IN.eye));	//ハーフベクトル
	float3 spec = Specular.xyz * pow(max(0, dot(N, H)), Specular.w);

	//スペキュラを加算
	color.xyz += spec;

	return color;
}
